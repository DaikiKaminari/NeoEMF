<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>fr.inria.atlanmod.neoemf</groupId>
        <artifactId>neoemf</artifactId>
        <version>1.0.3-SNAPSHOT</version>
    </parent>

    <artifactId>neoemf-core</artifactId>

    <packaging>bundle</packaging>

    <name>NeoEMF Core</name>
    <description>
        NeoEMF core component.
        Specialize the standard EMF classes and provide abstract classes for dedicated back-end extensions.
    </description>

    <properties>
        <chronicle-map.version>3.14.5</chronicle-map.version>
        <chronicle-bytes.version>1.11.2</chronicle-bytes.version>

        <log4j.version>2.8.2</log4j.version><!-- 2.9.0+ : compatibility issue with maven-bundle-plugin (JDK9) -->

        <cglib.version>3.2.6</cglib.version>
        <reflections.version>0.9.9</reflections.version><!-- 0.9.9+ : compatibility issue with Guava/HBase (15.0) -->
    </properties>

    <dependencies>

        <!-- Commons -->

        <dependency>
            <groupId>fr.inria.atlanmod.commons</groupId>
            <artifactId>commons-core</artifactId>
        </dependency>

        <!-- Database -->

        <dependency>
            <groupId>net.openhft</groupId>
            <artifactId>chronicle-map</artifactId>
        </dependency>

        <dependency>
            <groupId>net.openhft</groupId>
            <artifactId>chronicle-bytes</artifactId>
        </dependency>

        <!-- Reflection -->

        <dependency>
            <groupId>cglib</groupId>
            <artifactId>cglib-nodep</artifactId>
        </dependency>

        <dependency>
            <groupId>org.reflections</groupId>
            <artifactId>reflections</artifactId>
        </dependency>

        <dependency><!-- Used by `reflections` : Required for bundle analysis in an OSGi context -->
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-vfs2</artifactId>
            <version>2.2</version><!-- == 2.0 with bugfixes -->
            <scope>runtime</scope>
        </dependency>

        <!-- Logging -->

        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-jul</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j-impl</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-jcl</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-1.2-api</artifactId>
        </dependency>

        <!-- EMF -->

        <dependency>
            <groupId>org.eclipse.emf</groupId>
            <artifactId>org.eclipse.emf.common</artifactId>
        </dependency>

        <dependency>
            <groupId>org.eclipse.emf</groupId>
            <artifactId>org.eclipse.emf.ecore</artifactId>
        </dependency>

        <!-- OSGi -->

        <dependency>
            <groupId>org.osgi</groupId>
            <artifactId>org.osgi.core</artifactId>
            <version>6.0.0</version>
            <scope>provided</scope>
        </dependency>

        <!-- Test -->

        <dependency>
            <groupId>fr.inria.atlanmod.commons</groupId>
            <artifactId>commons-core</artifactId>
            <type>test-jar</type>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
        </dependency>

        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-params</artifactId>
        </dependency>

        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
        </dependency>

        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
        </dependency>

        <!-- Internal -->

        <dependency>
            <groupId>fr.inria.atlanmod.neoemf</groupId>
            <artifactId>neoemf-utils</artifactId>
            <version>${project.version}</version>
            <optional>true</optional>
            <type>pom</type>
        </dependency>

    </dependencies>

    <dependencyManagement>
        <dependencies>

            <!-- Database -->

            <dependency>
                <groupId>net.openhft</groupId>
                <artifactId>chronicle-map</artifactId>
                <version>${chronicle-map.version}</version>
            </dependency>

            <dependency>
                <groupId>net.openhft</groupId>
                <artifactId>chronicle-bytes</artifactId>
                <version>${chronicle-bytes.version}</version>
            </dependency>

            <!-- Reflection -->

            <dependency>
                <groupId>cglib</groupId>
                <artifactId>cglib-nodep</artifactId>
                <version>${cglib.version}</version>
            </dependency>

            <dependency>
                <groupId>org.reflections</groupId>
                <artifactId>reflections</artifactId>
                <version>${reflections.version}</version>
                <exclusions>
                    <exclusion> <!-- Should be optional -->
                        <groupId>com.google.code.findbugs</groupId>
                        <artifactId>annotations</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>

            <!-- Logging -->

            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-core</artifactId>
                <version>${log4j.version}</version>
                <scope>runtime</scope>
            </dependency>

            <dependency> <!-- Bridge for Java Logging -->
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-jul</artifactId>
                <version>${log4j.version}</version>
                <scope>runtime</scope>
            </dependency>

            <dependency> <!-- Bridge for SLF4J -->
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-slf4j-impl</artifactId>
                <version>${log4j.version}</version>
                <scope>runtime</scope>
            </dependency>

            <dependency> <!-- Bridge for Apache Commons Logging -->
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-jcl</artifactId>
                <version>${log4j.version}</version>
                <scope>runtime</scope>
            </dependency>

            <dependency> <!-- Bridge for Log4j v1.X -->
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-1.2-api</artifactId>
                <version>${log4j.version}</version>
                <scope>runtime</scope>
            </dependency>

        </dependencies>
    </dependencyManagement>

    <build>
        <plugins>

            <plugin>
                <groupId>org.apache.felix</groupId>
                <artifactId>maven-bundle-plugin</artifactId>
                <configuration>
                    <instructions>
                        <Bundle-SymbolicName>${project.groupId}.core</Bundle-SymbolicName>
                        <DynamicImport-Package>
                            *
                        </DynamicImport-Package>
                        <Export-Package>
                            !fr.inria.atlanmod.neoemf.*.internal.*,
                            fr.inria.atlanmod.neoemf.*
                        </Export-Package>
                        <Import-Package>
                            com.google.common.cache;resolution:=optional
                        </Import-Package>
                        <Require-Bundle>
                            fr.inria.atlanmod.commons;visibility:=reexport,
                            org.eclipse.emf.ecore;visibility:=reexport,
                            org.eclipse.emf.compare;resolution:=optional
                        </Require-Bundle>
                        <Bundle-Activator>fr.inria.atlanmod.neoemf.util.Activator</Bundle-Activator>
                    </instructions>
                </configuration>
            </plugin>

        </plugins>
    </build>

</project>
